{"ast":null,"code":"import Caver from 'caver-js';\nimport KIP17ABI from '../abi/KIP17TokenABI.json';\nimport { ACCESS_KEY_ID, SECRET_ACCESS_KEY, COUNT_CONTRACT_ADDRESS, NFT_CONTRACT_ADDRESS, MARKET_CONTRACT_ADDRESS, CHAIN_ID } from '../constants';\nconst option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_KEY).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nconst caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", option));\nconst NFTContract = new caver.contract(KIP17ABI, NFT_CONTRACT_ADDRESS);\nexport const fetchCardsOf = async address => {\n  // Fetch getBalance\n  const balance = await NFTContract.methods.balanceOf(address).call();\n  console.log(`[NFT Balance] ${balance}`); // Fetch Token IDs\n\n  const tokenIds = [];\n\n  for (let i = 0; i < balance; i++) {\n    const id = await NFTContract.methods.tokenOfOwnerByIndex(address, i).call();\n  } // Fetch Token URIs\n\n\n  const tokenUris = [];\n\n  for (let i = 0; i < balance; i++) {\n    const uri = await NFTContract.methods.tokenURI(tokenIds[i]).call();\n    tokenUris.push(uri);\n  }\n\n  console.log(`${tokenIds}`);\n  console.log(`${tokenUris}`);\n};\nexport const getBalance = address => {\n  return caver.rpc.klay.getBalance(address).then(respose => {\n    const balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(respose));\n    console.log(`BALANCE: ${balance}`);\n    return balance;\n  });\n};","map":{"version":3,"sources":["/workspace/ProjectLion_BlockCha/chapter05/klay-market/src/api/UseCaver.js"],"names":["Caver","KIP17ABI","ACCESS_KEY_ID","SECRET_ACCESS_KEY","COUNT_CONTRACT_ADDRESS","NFT_CONTRACT_ADDRESS","MARKET_CONTRACT_ADDRESS","CHAIN_ID","option","headers","name","value","Buffer","from","toString","caver","providers","HttpProvider","NFTContract","contract","fetchCardsOf","address","balance","methods","balanceOf","call","console","log","tokenIds","i","id","tokenOfOwnerByIndex","tokenUris","uri","tokenURI","push","getBalance","rpc","klay","then","respose","utils","convertFromPeb","hexToNumberString"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAAQC,aAAR,EAAuBC,iBAAvB,EAA0CC,sBAA1C,EAAkEC,oBAAlE,EAAwFC,uBAAxF,EAAiHC,QAAjH,QAAgI,cAAhI;AAEA,MAAMC,MAAM,GAAG;AACdC,EAAAA,OAAO,EAAE,CACR;AACCC,IAAAA,IAAI,EAAE,eADP;AAECC,IAAAA,KAAK,EAAE,WAAWC,MAAM,CAACC,IAAP,CAAYX,aAAa,GAAG,GAAhB,GAAsBC,iBAAlC,EAAqDW,QAArD,CAA8D,QAA9D;AAFnB,GADQ,EAKR;AACCJ,IAAAA,IAAI,EAAE,YADP;AACqBC,IAAAA,KAAK,EAAEJ;AAD5B,GALQ;AADK,CAAf;AAYA,MAAMQ,KAAK,GAAG,IAAIf,KAAJ,CAAU,IAAIA,KAAK,CAACgB,SAAN,CAAgBC,YAApB,CAAiC,0CAAjC,EAA6ET,MAA7E,CAAV,CAAd;AACA,MAAMU,WAAW,GAAG,IAAIH,KAAK,CAACI,QAAV,CAAmBlB,QAAnB,EAA4BI,oBAA5B,CAApB;AAGA,OAAO,MAAMe,YAAY,GAAG,MAAOC,OAAP,IAAmB;AAC9C;AACA,QAAMC,OAAO,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CAAoBC,SAApB,CAA8BH,OAA9B,EAAuCI,IAAvC,EAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBL,OAAQ,EAArC,EAH8C,CAI9C;;AACA,QAAMM,QAAQ,GAAG,EAAjB;;AACA,OAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAACP,OAAhB,EAAyBO,CAAC,EAA1B,EAA6B;AAC5B,UAAMC,EAAE,GAAG,MAAMZ,WAAW,CAACK,OAAZ,CAAoBQ,mBAApB,CAAwCV,OAAxC,EAAiDQ,CAAjD,EAAoDJ,IAApD,EAAjB;AACA,GAR6C,CAU9C;;;AACA,QAAMO,SAAS,GAAG,EAAlB;;AACA,OAAI,IAAIH,CAAC,GAAE,CAAX,EAAcA,CAAC,GAACP,OAAhB,EAAyBO,CAAC,EAA1B,EAA6B;AAC5B,UAAMI,GAAG,GAAG,MAAMf,WAAW,CAACK,OAAZ,CAAoBW,QAApB,CAA6BN,QAAQ,CAACC,CAAD,CAArC,EAA0CJ,IAA1C,EAAlB;AACAO,IAAAA,SAAS,CAACG,IAAV,CAAeF,GAAf;AACA;;AACDP,EAAAA,OAAO,CAACC,GAAR,CAAa,GAAEC,QAAS,EAAxB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAa,GAAEK,SAAU,EAAzB;AACA,CAlBM;AAoBP,OAAO,MAAMI,UAAU,GAAIf,OAAD,IAAa;AACtC,SAAON,KAAK,CAACsB,GAAN,CAAUC,IAAV,CAAeF,UAAf,CAA0Bf,OAA1B,EAAmCkB,IAAnC,CAAyCC,OAAD,IAAa;AAC3D,UAAMlB,OAAO,GAAGP,KAAK,CAAC0B,KAAN,CAAYC,cAAZ,CAA2B3B,KAAK,CAAC0B,KAAN,CAAYE,iBAAZ,CAA8BH,OAA9B,CAA3B,CAAhB;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWL,OAAQ,EAAhC;AACA,WAAOA,OAAP;AACA,GAJM,CAAP;AAKA,CANM","sourcesContent":["import Caver from 'caver-js';\nimport KIP17ABI from '../abi/KIP17TokenABI.json';\nimport {ACCESS_KEY_ID, SECRET_ACCESS_KEY, COUNT_CONTRACT_ADDRESS, NFT_CONTRACT_ADDRESS, MARKET_CONTRACT_ADDRESS, CHAIN_ID} from '../constants';\n\nconst option = {\n\theaders: [\n\t\t{\n\t\t\tname: \"Authorization\",\n\t\t\tvalue: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_KEY).toString(\"base64\")\n\t\t},\n\t\t{\n\t\t\tname: \"x-chain-id\", value: CHAIN_ID\n\t\t}\n\t]\n}\n\nconst caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", option));\nconst NFTContract = new caver.contract(KIP17ABI,NFT_CONTRACT_ADDRESS);\n\n\nexport const fetchCardsOf = async (address) => {\n\t// Fetch getBalance\n\tconst balance = await NFTContract.methods.balanceOf(address).call();\n\tconsole.log(`[NFT Balance] ${balance}`);\n\t// Fetch Token IDs\n\tconst tokenIds = [];\n\tfor(let i =0; i<balance; i++){\n\t\tconst id = await NFTContract.methods.tokenOfOwnerByIndex(address, i).call();\n\t}\n\t\n\t// Fetch Token URIs\n\tconst tokenUris = [];\n\tfor(let i =0; i<balance; i++){\n\t\tconst uri = await NFTContract.methods.tokenURI(tokenIds[i]).call();\n\t\ttokenUris.push(uri);\n\t}\n\tconsole.log(`${tokenIds}`);\n\tconsole.log(`${tokenUris}`);\n}\n\nexport const getBalance = (address) => {\n\treturn caver.rpc.klay.getBalance(address).then((respose) => {\n\t\tconst balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(respose));\n\t\tconsole.log(`BALANCE: ${balance}`); \n\t\treturn balance;\n\t})\n}\n"]},"metadata":{},"sourceType":"module"}