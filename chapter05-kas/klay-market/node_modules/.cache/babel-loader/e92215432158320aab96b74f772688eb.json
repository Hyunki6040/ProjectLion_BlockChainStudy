{"ast":null,"code":"import axios from \"axios\";\nimport { NFT_CONTRACT_ADDRESS, MARKET_CONTRACT_ADDRESS } from \"../constants/index\";\nconst A2P_API_PREPAR_URL = \"https://a2a-api.klipwallet.com/v2/a2a/prepare\";\nconst APP_NAME = \"KLAY_MARKET\";\nconst isMobile = window.screen.width >= 1280 ? false : true;\n\nconst getKlipAccessUrl = (method, request_key) => {\n  if (method === 'QR') {\n    return `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n  }\n\n  return `kakaotalk://klipwallet/open?url=https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n};\n\nexport const buyCard = async (tokenId, setQrvalue, callback) => {\n  const functionJSON = '{ \"constant\": false, \"inputs\": [ { \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"name\": \"NFTAddress\", \"type\": \"address\" } ], \"name\": \"buyNFT\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n  executeContract(MARKET_CONTRACT_ADDRESS, functionJSON, \"10000000000000000\", `[\"${tokenId}\",\"${NFT_CONTRACT_ADDRESS}\"]`, setQrvalue, callback);\n};\nexport const listingCard = async (fromAddress, tokenId, setQrvalue, callback) => {\n  const functionJSON = '{ \"constant\": false, \"inputs\": [ { \"name\": \"from\", \"type\": \"address\" }, { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n  executeContract(NFT_CONTRACT_ADDRESS, functionJSON, \"0\", `[\"${fromAddress}\",\"${MARKET_CONTRACT_ADDRESS}\",\"${tokenId}\"]`, setQrvalue, callback);\n};\nexport const mintCardWithURI = async (toAddress, tokenId, uri, setQrvalue, callback) => {\n  const functionJSON = '{ \"constant\": false, \"inputs\": [ { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"name\": \"tokenURI\", \"type\": \"string\" } ], \"name\": \"mintWithTokenURI\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n  executeContract(NFT_CONTRACT_ADDRESS, functionJSON, \"0\", `[\"${toAddress}\",\"${tokenId}\",\"${uri}\"]`, setQrvalue, callback);\n};\nexport const executeContract = (txTo, functionJSON, value, params, setQrvalue, callback) => {\n  axios.post(A2P_API_PREPAR_URL, {\n    bapp: {\n      name: APP_NAME\n    },\n    type: \"execute_contract\",\n    transaction: {\n      to: txTo,\n      abi: functionJSON,\n      value: value,\n      params: params\n    }\n  }).then(response => {\n    const {\n      request_key\n    } = response.data;\n    const qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n    setQrvalue(qrcode);\n    let timerId = setInterval(() => {\n      axios.get(`https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`).then(res => {\n        if (res.data.result) {\n          console.log(`[Result] (${JSON.stringify(res.data.result)}`);\n\n          if (res.data.result.status === 'sccess') {\n            clearInterval(timerId);\n            callback(res.data.result);\n          }\n        }\n      });\n    }, 1000);\n  });\n};\nexport const getAddress = (setQrvalue, callback) => {\n  axios.post(A2P_API_PREPAR_URL, {\n    bapp: {\n      name: APP_NAME\n    },\n    type: \"auth\"\n  }).then(response => {\n    const {\n      request_key\n    } = response.data;\n    const qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n    setQrvalue(qrcode);\n    let timerId = setInterval(() => {\n      axios.get(`https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`).then(res => {\n        if (res.data.result) {\n          console.log(`[Result] (${JSON.stringify(res.data.result)}`);\n          callback(res.data.result.klaytn_address);\n          clearInterval(timerId);\n        }\n      });\n    }, 1000);\n  });\n}; // export const setCount = (count, setQrvalue) => {\n// \taxios.post(\n// \t\tA2P_API_PREPAR_URL,{\n// \t\t\tbapp: {\n// \t\t\t\tname: APP_NAME\n// \t\t\t},\n// \t\t\ttype: \"execute_contract\",\n// \t\t\ttransaction: {\n// \t\t\t\tto: COUNT_CONTRACT_ADDRESS,\n// \t\t\t\tabi: '{ \"constant\": false, \"inputs\": [ { \"name\": \"_count\", \"type\": \"uint256\" } ], \"name\": \"setCount\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }',\n// \t\t\t\tvalue: \"0\",\n// \t\t\t\tparams: `[\"${count}\"]`\n// \t\t\t}\n// \t\t}\n// \t).then((response) => {\n// \t\tconst {request_key} = response.data;\n// \t\tconst qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n// \t\tsetQrvalue(qrcode);\n// \t\tlet timerId = setInterval(() => {\n// \t\t\taxios.get(`https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`).then((res) => {\n// \t\t\t\tif (res.data.result) {\n// \t\t\t\t\tconsole.log(`[Result] (${JSON.stringify(res.data.result)}`);\n// \t\t\t\t\tif(res.data.result.status === 'sccess'){\n// \t\t\t\t\t\tclearInterval(timerId);\n// \t\t\t\t\t}\n// \t\t\t\t}\n// \t\t\t});\n// \t\t}, 1000)\n// \t});\n// }","map":{"version":3,"sources":["/workspace/ProjectLion_BlockCha/chapter05/klay-market/src/api/UseKlip.js"],"names":["axios","NFT_CONTRACT_ADDRESS","MARKET_CONTRACT_ADDRESS","A2P_API_PREPAR_URL","APP_NAME","isMobile","window","screen","width","getKlipAccessUrl","method","request_key","buyCard","tokenId","setQrvalue","callback","functionJSON","executeContract","listingCard","fromAddress","mintCardWithURI","toAddress","uri","txTo","value","params","post","bapp","name","type","transaction","to","abi","then","response","data","qrcode","timerId","setInterval","get","res","result","console","log","JSON","stringify","status","clearInterval","getAddress","klaytn_address"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { NFT_CONTRACT_ADDRESS, MARKET_CONTRACT_ADDRESS } from \"../constants/index\";\n\nconst A2P_API_PREPAR_URL = \"https://a2a-api.klipwallet.com/v2/a2a/prepare\";\nconst APP_NAME = \"KLAY_MARKET\";\nconst isMobile = window.screen.width >= 1280 ? false : true;\n\nconst getKlipAccessUrl = (method, request_key) =>{\n\tif(method === 'QR'){\n\t\treturn `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n\t}\n\treturn `kakaotalk://klipwallet/open?url=https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n}\nexport const buyCard = async (\n\ttokenId,\n\tsetQrvalue,\n\tcallback\n) =>{\n\tconst functionJSON = '{ \"constant\": false, \"inputs\": [ { \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"name\": \"NFTAddress\", \"type\": \"address\" } ], \"name\": \"buyNFT\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n\texecuteContract(\n\t\tMARKET_CONTRACT_ADDRESS,\n\t\tfunctionJSON,\n\t\t\"10000000000000000\",\n\t\t`[\"${tokenId}\",\"${NFT_CONTRACT_ADDRESS}\"]`,\n\t\tsetQrvalue,\n\t\tcallback\n\t);\n};\n\nexport const listingCard = async (\n\tfromAddress,\n\ttokenId,\n\tsetQrvalue,\n\tcallback\n) =>{\n\tconst functionJSON = '{ \"constant\": false, \"inputs\": [ { \"name\": \"from\", \"type\": \"address\" }, { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n\texecuteContract(\n\t\tNFT_CONTRACT_ADDRESS,\n\t\tfunctionJSON,\n\t\t\"0\",\n\t\t`[\"${fromAddress}\",\"${MARKET_CONTRACT_ADDRESS}\",\"${tokenId}\"]`,\n\t\tsetQrvalue,\n\t\tcallback\n\t);\n};\n\nexport const mintCardWithURI = async (toAddress, tokenId, uri, setQrvalue, callback) =>{\n\tconst functionJSON = '{ \"constant\": false, \"inputs\": [ { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"name\": \"tokenURI\", \"type\": \"string\" } ], \"name\": \"mintWithTokenURI\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n\texecuteContract(NFT_CONTRACT_ADDRESS, functionJSON, \"0\", `[\"${toAddress}\",\"${tokenId}\",\"${uri}\"]`, setQrvalue, callback);\n};\n\nexport const executeContract = (txTo, functionJSON, value, params, setQrvalue, callback) => {\n\taxios.post(\n\t\tA2P_API_PREPAR_URL,{\n\t\t\tbapp: {\n\t\t\t\tname: APP_NAME\n\t\t\t},\n\t\t\ttype: \"execute_contract\",\n\t\t\ttransaction: {\n\t\t\t\tto: txTo,\n\t\t\t\tabi: functionJSON,\n\t\t\t\tvalue: value,\n\t\t\t\tparams: params\n\t\t\t}\n\t\t}\n\t).then((response) => {\n\t\tconst {request_key} = response.data;\n\t\tconst qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n\t\tsetQrvalue(qrcode);\n\t\t\n\t\tlet timerId = setInterval(() => {\n\t\t\taxios.get(`https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`).then((res) => {\n\t\t\t\tif (res.data.result) {\n\t\t\t\t\tconsole.log(`[Result] (${JSON.stringify(res.data.result)}`);\n\t\t\t\t\tif(res.data.result.status === 'sccess'){\n\t\t\t\t\t\tclearInterval(timerId);\n\t\t\t\t\t\tcallback(res.data.result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}, 1000)\n\t});\n};\n\n\nexport const getAddress = (setQrvalue, callback) => {\n\taxios.post(\n\t\tA2P_API_PREPAR_URL,{\n\t\t\tbapp: {\n\t\t\t\tname: APP_NAME\n\t\t\t},\n\t\t\ttype: \"auth\"\n\t\t}\n\t).then((response) => {\n\t\tconst {request_key} = response.data;\n\t\tconst qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n\t\tsetQrvalue(qrcode);\n\t\t\n\t\tlet timerId = setInterval(() => {\n\t\t\taxios.get(`https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`).then((res) => {\n\t\t\t\tif (res.data.result) {\n\t\t\t\t\tconsole.log(`[Result] (${JSON.stringify(res.data.result)}`);\n\t\t\t\t\tcallback(res.data.result.klaytn_address);\n\t\t\t\t\tclearInterval(timerId);\n\t\t\t\t}\n\t\t\t});\n\t\t}, 1000)\n\t})\n}\n\n// export const setCount = (count, setQrvalue) => {\n// \taxios.post(\n// \t\tA2P_API_PREPAR_URL,{\n// \t\t\tbapp: {\n// \t\t\t\tname: APP_NAME\n// \t\t\t},\n// \t\t\ttype: \"execute_contract\",\n// \t\t\ttransaction: {\n// \t\t\t\tto: COUNT_CONTRACT_ADDRESS,\n// \t\t\t\tabi: '{ \"constant\": false, \"inputs\": [ { \"name\": \"_count\", \"type\": \"uint256\" } ], \"name\": \"setCount\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }',\n// \t\t\t\tvalue: \"0\",\n// \t\t\t\tparams: `[\"${count}\"]`\n// \t\t\t}\n// \t\t}\n// \t).then((response) => {\n// \t\tconst {request_key} = response.data;\n// \t\tconst qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n// \t\tsetQrvalue(qrcode);\n\t\t\n// \t\tlet timerId = setInterval(() => {\n// \t\t\taxios.get(`https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`).then((res) => {\n// \t\t\t\tif (res.data.result) {\n// \t\t\t\t\tconsole.log(`[Result] (${JSON.stringify(res.data.result)}`);\n// \t\t\t\t\tif(res.data.result.status === 'sccess'){\n// \t\t\t\t\t\tclearInterval(timerId);\n// \t\t\t\t\t}\n// \t\t\t\t}\n// \t\t\t});\n// \t\t}, 1000)\n// \t});\n// }"]},"metadata":{},"sourceType":"module"}