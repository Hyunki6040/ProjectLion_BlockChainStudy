{"ast":null,"code":"import Caver from 'caver-js';\nimport CounterABI from '../abi/CounterABI.json';\nimport { ACCESS_KEY_ID, SECRET_ACCESS_KEY, COUNT_CONTRACT_ADDRESS, CHAIN_ID } from '../constants';\nconst option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_KEY).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nconst caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", option));\nconst CountContract = new caver.contract(CounterABI, COUNT_CONTRACT_ADDRESS);\nexport const readCount = async () => {\n  const _count = await CountContract.methods.count().call();\n\n  console.log(_count);\n};\nexport const getBalance = address => {\n  return caver.rpc.klay.getBalance(address).then(respose => {\n    const balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(respose));\n    console.log(`BALANCE: ${balance}`);\n    return balance;\n  });\n};\nexport const setCount = async newCount => {\n  // 사용할 account 설정\n  try {\n    const privatekey = '0x646e24fdef558df6b75b6522af48b4b70510233a46b57c4da119cf05feeb88f9';\n    const deployer = caver.wallet.keyring.createFromPrivateKey(privatekey);\n    caver.wallet.add(deployer); // 스마트 컨트랙트 실행 트랜젝션 날리기\n    // 결과 확인\n\n    const receipt = await CountContract.methods.setCount(newCount).send({\n      from: deployer.address,\n      // address\n      gas: \"0x4bfd200\" //\n\n    });\n    console.log(receipt);\n  } catch (e) {\n    console.log(`[ERROR_SET_COUNT]${e}`);\n  }\n};","map":{"version":3,"sources":["/workspace/ProjectLion_BlockCha/chapter05/klay-market/src/api/UseCaver.js"],"names":["Caver","CounterABI","ACCESS_KEY_ID","SECRET_ACCESS_KEY","COUNT_CONTRACT_ADDRESS","CHAIN_ID","option","headers","name","value","Buffer","from","toString","caver","providers","HttpProvider","CountContract","contract","readCount","_count","methods","count","call","console","log","getBalance","address","rpc","klay","then","respose","balance","utils","convertFromPeb","hexToNumberString","setCount","newCount","privatekey","deployer","wallet","keyring","createFromPrivateKey","add","receipt","send","gas","e"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAAQC,aAAR,EAAuBC,iBAAvB,EAA0CC,sBAA1C,EAAkEC,QAAlE,QAAiF,cAAjF;AAEA,MAAMC,MAAM,GAAG;AACdC,EAAAA,OAAO,EAAE,CACR;AACCC,IAAAA,IAAI,EAAE,eADP;AAECC,IAAAA,KAAK,EAAE,WAAWC,MAAM,CAACC,IAAP,CAAYT,aAAa,GAAG,GAAhB,GAAsBC,iBAAlC,EAAqDS,QAArD,CAA8D,QAA9D;AAFnB,GADQ,EAKR;AACCJ,IAAAA,IAAI,EAAE,YADP;AACqBC,IAAAA,KAAK,EAAEJ;AAD5B,GALQ;AADK,CAAf;AAYA,MAAMQ,KAAK,GAAG,IAAIb,KAAJ,CAAU,IAAIA,KAAK,CAACc,SAAN,CAAgBC,YAApB,CAAiC,0CAAjC,EAA6ET,MAA7E,CAAV,CAAd;AACA,MAAMU,aAAa,GAAG,IAAIH,KAAK,CAACI,QAAV,CAAmBhB,UAAnB,EAA+BG,sBAA/B,CAAtB;AACA,OAAO,MAAMc,SAAS,GAAG,YAAY;AACpC,QAAMC,MAAM,GAAG,MAAMH,aAAa,CAACI,OAAd,CAAsBC,KAAtB,GAA8BC,IAA9B,EAArB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,CAHM;AAKP,OAAO,MAAMM,UAAU,GAAIC,OAAD,IAAa;AACtC,SAAOb,KAAK,CAACc,GAAN,CAAUC,IAAV,CAAeH,UAAf,CAA0BC,OAA1B,EAAmCG,IAAnC,CAAyCC,OAAD,IAAa;AAC3D,UAAMC,OAAO,GAAGlB,KAAK,CAACmB,KAAN,CAAYC,cAAZ,CAA2BpB,KAAK,CAACmB,KAAN,CAAYE,iBAAZ,CAA8BJ,OAA9B,CAA3B,CAAhB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWO,OAAQ,EAAhC;AACA,WAAOA,OAAP;AACA,GAJM,CAAP;AAKA,CANM;AAQP,OAAO,MAAMI,QAAQ,GAAG,MAAOC,QAAP,IAAoB;AAC3C;AACA,MAAG;AACF,UAAMC,UAAU,GAAG,oEAAnB;AACA,UAAMC,QAAQ,GAAGzB,KAAK,CAAC0B,MAAN,CAAaC,OAAb,CAAqBC,oBAArB,CAA0CJ,UAA1C,CAAjB;AACAxB,IAAAA,KAAK,CAAC0B,MAAN,CAAaG,GAAb,CAAiBJ,QAAjB,EAHE,CAIF;AACA;;AAEA,UAAMK,OAAO,GAAG,MAAM3B,aAAa,CAACI,OAAd,CAAsBe,QAAtB,CAA+BC,QAA/B,EAAyCQ,IAAzC,CAA8C;AACnEjC,MAAAA,IAAI,EAAE2B,QAAQ,CAACZ,OADoD;AAC3C;AACxBmB,MAAAA,GAAG,EAAE,WAF8D,CAEnD;;AAFmD,KAA9C,CAAtB;AAIAtB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,OAAZ;AACA,GAZD,CAYC,OAAMG,CAAN,EAAS;AACTvB,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBsB,CAAE,EAAlC;AACA;AAED,CAlBM","sourcesContent":["import Caver from 'caver-js';\nimport CounterABI from '../abi/CounterABI.json';\nimport {ACCESS_KEY_ID, SECRET_ACCESS_KEY, COUNT_CONTRACT_ADDRESS, CHAIN_ID} from '../constants';\n\nconst option = {\n\theaders: [\n\t\t{\n\t\t\tname: \"Authorization\",\n\t\t\tvalue: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_KEY).toString(\"base64\")\n\t\t},\n\t\t{\n\t\t\tname: \"x-chain-id\", value: CHAIN_ID\n\t\t}\n\t]\n}\n\nconst caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", option));\nconst CountContract = new caver.contract(CounterABI, COUNT_CONTRACT_ADDRESS);\nexport const readCount = async () => {\n\tconst _count = await CountContract.methods.count().call();\n\tconsole.log(_count);\n}\n\nexport const getBalance = (address) => {\n\treturn caver.rpc.klay.getBalance(address).then((respose) => {\n\t\tconst balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(respose));\n\t\tconsole.log(`BALANCE: ${balance}`); \n\t\treturn balance;\n\t})\n}\n\nexport const setCount = async (newCount) => {\n\t// 사용할 account 설정\n\ttry{\n\t\tconst privatekey = '0x646e24fdef558df6b75b6522af48b4b70510233a46b57c4da119cf05feeb88f9';\n\t\tconst deployer = caver.wallet.keyring.createFromPrivateKey(privatekey);\n\t\tcaver.wallet.add(deployer);\n\t\t// 스마트 컨트랙트 실행 트랜젝션 날리기\n\t\t// 결과 확인\n\n\t\tconst receipt = await CountContract.methods.setCount(newCount).send({\n\t\t\tfrom: deployer.address, // address\n\t\t\tgas: \"0x4bfd200\"//\n\t\t});\n\t\tconsole.log(receipt);\n\t}catch(e) {\n\t\tconsole.log(`[ERROR_SET_COUNT]${e}`);\n\t}\n\t\n}"]},"metadata":{},"sourceType":"module"}